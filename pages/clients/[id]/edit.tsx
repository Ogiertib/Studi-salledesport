import Head from 'next/head'
import Header from '../../../components/Header'
import { ArrowRightIcon, PlusIcon, TrashIcon} from '@heroicons/react/24/outline'
import { useQuery } from 'react-query'
import { useRouter } from 'next/router'
import { Dialog, Transition } from '@headlessui/react'
import { useState, Fragment } from 'react'

export default function NewFranchise() {
  const router = useRouter()
  const id = router.query.id
  let [isOpenUpdate, setIsOpenUpdate] = useState(false)
  function openUpdateModal() {
    setIsOpenUpdate(true)
  }
  function closeUpdateModal() {
    setIsOpenUpdate(false)
  }
  let [isOpen, setIsOpen] = useState(false)
  function openModal() {
    setIsOpen(true)
  }
  function closeModal() {
    setIsOpen(false)
  }
  const { data } = useQuery(
   ['clients', id],
   async () => {
     const res = await fetch(`/api/clients/${id}`)
     return await res.json()
   }
 )
 console.log(data?.franchises.name)
 const onSubmit =(d :any)=> alert(JSON.stringify(d))
  return (
    <div>
      <Head>
        <title>Franchise</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/public/favicon.ico" />
      </Head>

      <Header/>

      <main>
        <header className="bg-white shadow">
          <div className="mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
            <h1 className="text-3xl font-bold tracking-tight text-gray-900">Client</h1>
          </div>
        </header>

        <div className="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
          {<div>
                <div>Modification d'un client</div>
                
            </div>
          }
          <div className="px-4 py-6 sm:px-0">
            
            <div className="h-96 rounded-lg m-2 border-4 border border-gray-200">
              <form onSubmit={onSubmit}>
                <div>
                    <label>Name
                        <input name="name"
                        className="rounded-lg m-2 border-4 border border-gray-400"
                        placeholder={data?.name}
                        >
                        </input>
                    </label>
                </div>
                <div>
                    <label>Adresse
                        <input 
                        name="address" 
                        className="rounded-lg m-2 border-4 border border-gray-400"
                        placeholder={data?.address}
                        >
                        </input>
                    </label>
                </div>
                <div>
                <label>Gérer les plannings
                    <input 
                        name="planning" 
                        type="checkbox" 
                        checked = {data?.planning}
                        className="rounded-lg border-4 m-2 border border-gray-400">
                    </input>
                </label>
                <label>Gérer les boissons
                    <input 
                        name="drink" 
                        type="checkbox" 
                        checked = {data?.drink}
                        className="rounded-lg border-4 m-2 border border-gray-400">
                    </input>
                </label>
                <label>Gérer la newsletter
                    <input 
                        name="newsletter" 
                        type="checkbox" 
                        checked = {data?.newsletter}
                        className="rounded-lg border-4 m-2 border border-gray-400">
                    </input>
                </label>
                </div>
                <div>
                <label>Contact
                    <select
                        name="userId" 
                        className="rounded-lg m-2 border-4 border border-gray-400"
                        >
                          {data?.franchises && data.franchises.map((franchises: any) => (
                         
                          <option  key={franchises.id} value={franchises.id}>{franchises.name}</option>
              ))}
                    </select>
                </label>
                <a href={`/user/new`}>Ajouter un contact
                    <button
                        type="button"
                        
                        className="rounded-full bg-green-700 m-2 p-1 text-neutral-50 hover:text-gray-400 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
                        >
                        <PlusIcon className="h-6 w-6" aria-hidden="true" />
                    </button>
                </a>
                </div>
                <button 
                    type="button" 
                    onClick={openUpdateModal}
                    className="rounded-full bg-gray-800 p-1 m-2 text-neutral-50 hover:text-gray-400 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
                >Modifier
                </button>
              </form>
              <div>
                    <button
                        onClick={openModal}
                        type="button"
                        className="rounded-full bg-red-600 p-1 m-2 text-neutral-50 hover:text-gray-800 focus:outline-none focus:ring-2 focus:ring-gray focus:ring-offset-2 focus:ring-offset-gray-800"
                        >
                        Supprimer
                    </button>
            </div>
           
            </div>
          </div>
          {}<Transition appear show={isOpen} as={Fragment}>
        <Dialog as="div" className="relative z-10" onClose={closeModal}>
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black bg-opacity-25" />
          </Transition.Child>

          <div className="fixed inset-0 overflow-y-auto">
            <div className="flex min-h-full items-center justify-center p-4 text-center">
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 scale-95"
                enterTo="opacity-100 scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 scale-100"
                leaveTo="opacity-0 scale-95"
              >
                <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                  <Dialog.Title
                    as="h3"
                    className="text-lg font-medium leading-6 text-gray-900"
                  >
                   Etes vous sur de vouloir supprimer le client?
                  </Dialog.Title>
                  <div className="mt-2">
                  </div>
                  <div className="mt-4">
                    <button
                      type="button"
                      className="inline-flex justify-center rounded-md border border-transparent bg-green-300 px-4 py-2 text-sm font-medium text-white-200 hover:bg-green-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-green-800 focus-visible:ring-offset-2"
                      onClick={closeModal}
                    >
                     Valider
                    </button>
                    <button
                      type="button"
                      className="inline-flex m-2 justify-center rounded-md border border-transparent bg-red-400 px-4 py-2 text-sm font-medium text-white-200 hover:bg-red-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-800 focus-visible:ring-offset-2"
                      onClick={closeModal}
                    >
                     Annuler
                    </button>
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition>
      <Transition appear show={isOpenUpdate} as={Fragment}>
        <Dialog as="div" className="relative z-10" onClose={closeUpdateModal}>
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black bg-opacity-25" />
          </Transition.Child>
          <div className="fixed inset-0 overflow-y-auto">
            <div className="flex min-h-full items-center justify-center p-4 text-center">
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 scale-95"
                enterTo="opacity-100 scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 scale-100"
                leaveTo="opacity-0 scale-95"
              >
                <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                  <Dialog.Title
                    as="h3"
                    className="text-lg font-medium leading-6 text-gray-900"
                  >
                   Etes vous sur de vouloir modifier le client?
                  </Dialog.Title>
                  <div className="mt-2">
                  </div>
                  <div className="mt-4">
                    <button
                      type="button"
                      className="inline-flex justify-center rounded-md border border-transparent bg-green-300 px-4 py-2 text-sm font-medium text-white-200 hover:bg-green-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-green-800 focus-visible:ring-offset-2"
                      onClick={closeUpdateModal}
                    >
                     Valider
                    </button>
                    <button
                      type="button"
                      className="inline-flex m-2 justify-center rounded-md border border-transparent bg-red-400 px-4 py-2 text-sm font-medium text-white-200 hover:bg-red-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-800 focus-visible:ring-offset-2"
                      onClick={closeUpdateModal}
                    >
                     Annuler
                    </button>
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition>
        </div>
      </main>

    </div>
  )
}